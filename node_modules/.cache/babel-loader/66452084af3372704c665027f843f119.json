{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\\\u0412\\u0438\\u043A\\u0442\\u043E\\u0440_\\u041C\\\\Desktop\\\\Phytin\\\\single_page\\\\singpe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\\\u0412\\u0438\\u043A\\u0442\\u043E\\u0440_\\u041C\\\\Desktop\\\\Phytin\\\\single_page\\\\singpe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\\\u0412\\u0438\\u043A\\u0442\\u043E\\u0440_\\u041C\\\\Desktop\\\\Phytin\\\\single_page\\\\singpe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\\\u0412\\u0438\\u043A\\u0442\\u043E\\u0440_\\u041C\\\\Desktop\\\\Phytin\\\\single_page\\\\singpe\\\\src\\\\pages.js\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nimport React, { useMemo, useState, useEffect } from \"react\";\nexport default function Pages_count(_ref) {\n  var _this = this;\n  var setCars = _ref.setCars,\n    pag = _ref.pag;\n  var _useState = useState(fage),\n    _useState2 = _slicedToArray(_useState, 2),\n    page = _useState2[0],\n    setPage = _useState2[1];\n  function changecars(p) {\n    //Устанавливаем в сет 6 карточек с выбранной страницы\n    //setCars(()=>cars_count.slice(p*6,(p*6)+6))\n    setPage([p - 1, p, p + 1]);\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 1\n    }\n  }, page.map(function (item, index) {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      key: index,\n      className: \"pages\",\n      onClick: function onClick() {\n        return changecars(index);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 26\n      }\n    }, item);\n  }));\n}\nfunction go() {\n  return _go.apply(this, arguments);\n}\nfunction _go() {\n  _go = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return new Promise(r, function (j) {\n            if (pag.length > 3) {\n              var _fage = [\"<\"].concat(_toConsumableArray(pag), [\">\"]);\n            } else {\n              var page_array = _toConsumableArray(pag);\n            }\n            var _useState3 = useState(fage),\n              _useState4 = _slicedToArray(_useState3, 2),\n              page = _useState4[0],\n              setPage = _useState4[1];\n            console.log(fage);\n            console.log(fage);\n          });\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _go.apply(this, arguments);\n}","map":{"version":3,"names":["React","useMemo","useState","useEffect","Pages_count","setCars","pag","fage","page","setPage","changecars","p","map","item","index","go","Promise","r","j","length","page_array","console","log"],"sources":["C:/Users/Виктор_М/Desktop/Phytin/single_page/singpe/src/pages.js"],"sourcesContent":["import React,{useMemo, useState,useEffect} from \"react\";\r\n\r\n\r\nexport default function Pages_count({setCars,pag}){\r\n    const [page,setPage]=useState(fage)\r\n  \r\n    function changecars(p){                //Устанавливаем в сет 6 карточек с выбранной страницы\r\n     //setCars(()=>cars_count.slice(p*6,(p*6)+6))\r\n        setPage([p-1,p,p+1]) \r\n    }\r\n\r\n    return (\r\n<div>\r\n {page.map((item,index)=><button key={index} className=\"pages\" onClick={()=>changecars(index)}>{item}</button>)}\r\n</div>\r\n    )\r\n\r\n}\r\nasync function go(){\r\n    await new Promise(r,j=>{\r\n        \r\n    if (pag.length>3){  \r\n        let fage=[\"<\",...pag,\">\"]\r\n     }\r\n     else{let page_array=[...pag]}\r\n    const [page,setPage]=useState(fage)\r\n   console.log(fage)\r\n \r\n    console.log(fage)\r\n    })\r\n}"],"mappings":";;;;+CACA;AADA,OAAOA,KAAK,IAAEC,OAAO,EAAEC,QAAQ,EAACC,SAAS,QAAO,OAAO;AAGvD,eAAe,SAASC,WAAW,OAAe;EAAA;EAAA,IAAbC,OAAO,QAAPA,OAAO;IAACC,GAAG,QAAHA,GAAG;EAAA,gBACvBJ,QAAQ,CAACK,IAAI,CAAC;IAAA;IAA5BC,IAAI;IAACC,OAAO;EAEnB,SAASC,UAAU,CAACC,CAAC,EAAC;IAAiB;IACtC;IACGF,OAAO,CAAC,CAACE,CAAC,GAAC,CAAC,EAACA,CAAC,EAACA,CAAC,GAAC,CAAC,CAAC,CAAC;EACxB;EAEA,oBACJ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACEH,IAAI,CAACI,GAAG,CAAC,UAACC,IAAI,EAACC,KAAK;IAAA,oBAAG;MAAQ,GAAG,EAAEA,KAAM;MAAC,SAAS,EAAC,OAAO;MAAC,OAAO,EAAE;QAAA,OAAIJ,UAAU,CAACI,KAAK,CAAC;MAAA,CAAC;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAED,IAAI,CAAU;EAAA,EAAC,CACzG;AAGN;AAAC,SACcE,EAAE;EAAA;AAAA;AAAA;EAAA,iEAAjB;IAAA;MAAA;QAAA;UAAA;UAAA,OACU,IAAIC,OAAO,CAACC,CAAC,EAAC,UAAAC,CAAC,EAAE;YAEvB,IAAIZ,GAAG,CAACa,MAAM,GAAC,CAAC,EAAC;cACb,IAAIZ,KAAI,IAAE,GAAG,4BAAID,GAAG,IAAC,GAAG,EAAC;YAC5B,CAAC,MACG;cAAC,IAAIc,UAAU,sBAAKd,GAAG,CAAC;YAAA;YAAC,iBACTJ,QAAQ,CAACK,IAAI,CAAC;cAAA;cAA5BC,IAAI;cAACC,OAAO;YACpBY,OAAO,CAACC,GAAG,CAACf,IAAI,CAAC;YAEhBc,OAAO,CAACC,GAAG,CAACf,IAAI,CAAC;UACjB,CAAC,CAAC;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA,CACL;EAAA;AAAA"},"metadata":{},"sourceType":"module"}