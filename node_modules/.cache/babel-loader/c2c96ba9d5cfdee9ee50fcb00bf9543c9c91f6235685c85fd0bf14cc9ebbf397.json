{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u0412\\u0438\\u043A\\u0442\\u043E\\u0440_\\u041C\\\\Desktop\\\\Phytin\\\\single_page\\\\singpe\\\\src\\\\main.js\";\nimport React, { useMemo, useState, useEffect } from \"react\";\nimport Card from \"./card\";\nimport Pages_count from \"./pages\";\nimport Maxshow from \"./maxShow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Main(_ref) {\n  let {\n    ArayCar,\n    setArayCar,\n    setShow,\n    show\n  } = _ref;\n  const count = [0, 6];\n  let pages = Math.ceil(ArayCar.length / 6); //Вычисляем количество страниц\n\n  function createPages() {\n    //Функция,вычисляющая массив с индексами страницц\n    let result = [];\n    for (let i = 1; i <= pages; i++) {\n      result.push(i);\n    }\n    return result;\n  }\n  let res = createPages(); //Вычисляем массив с индексами страницц\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main_content\",\n        children: [[...ArayCar.slice(count[0], count[1])].map((item, index) => /*#__PURE__*/_jsxDEV(Card, {\n          info: item,\n          setShow: setShow\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 62\n        }, this)), /*#__PURE__*/_jsxDEV(Maxshow, {\n          show: show,\n          setShow: setShow\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 2\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pages_counter\",\n        children: /*#__PURE__*/_jsxDEV(Pages_count, {\n          pag: res,\n          setArayCar: setArayCar,\n          ArayCar: ArayCar,\n          cars: cars\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 3\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 2\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 3\n    }, this)\n  }, void 0, false);\n}\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useMemo","useState","useEffect","Card","Pages_count","Maxshow","Main","ArayCar","setArayCar","setShow","show","count","pages","Math","ceil","length","createPages","result","i","push","res","slice","map","item","index","cars"],"sources":["C:/Users/Виктор_М/Desktop/Phytin/single_page/singpe/src/main.js"],"sourcesContent":["import React,{useMemo, useState,useEffect} from \"react\";\r\nimport Card from \"./card\";\r\nimport Pages_count from \"./pages\";\r\nimport Maxshow from \"./maxShow\";\r\n\r\nfunction Main({ArayCar,setArayCar,setShow,show}) {\r\n   const count=[0,6] \r\n    let pages=Math.ceil(ArayCar.length/6)    //Вычисляем количество страниц\r\n  \r\n    function createPages(){               //Функция,вычисляющая массив с индексами страницц\r\n      let result=[]\r\n       for(let i=1;i<=pages;i++){\r\n        result.push(i)\r\n       }\r\n     return result\r\n    }\r\n  \r\nlet res=createPages()                   //Вычисляем массив с индексами страницц\r\n\r\n  return (\r\n  <>\r\n  <div className=\"main\">\r\n <div className=\"main_content\" >\r\n    {[...ArayCar.slice(count[0],count[1])].map((item,index)=><Card info={item} key={index} setShow={setShow} />)}\r\n    <Maxshow show={show} setShow={setShow}/>\r\n </div>\r\n <div className=\"pages_counter\">\r\n  <Pages_count  pag={res} setArayCar={setArayCar} ArayCar={ArayCar} cars={cars}  />\r\n  </div>\r\n \r\n </div>\r\n \r\n </>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAEC,OAAO,EAAEC,QAAQ,EAACC,SAAS,QAAO,OAAO;AACvD,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,WAAW,MAAM,SAAS;AACjC,OAAOC,OAAO,MAAM,WAAW;AAAC;AAAA;AAEhC,SAASC,IAAI,OAAoC;EAAA,IAAnC;IAACC,OAAO;IAACC,UAAU;IAACC,OAAO;IAACC;EAAI,CAAC;EAC5C,MAAMC,KAAK,GAAC,CAAC,CAAC,EAAC,CAAC,CAAC;EAChB,IAAIC,KAAK,GAACC,IAAI,CAACC,IAAI,CAACP,OAAO,CAACQ,MAAM,GAAC,CAAC,CAAC,EAAI;;EAEzC,SAASC,WAAW,GAAE;IAAgB;IACpC,IAAIC,MAAM,GAAC,EAAE;IACZ,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,IAAEN,KAAK,EAACM,CAAC,EAAE,EAAC;MACxBD,MAAM,CAACE,IAAI,CAACD,CAAC,CAAC;IACf;IACF,OAAOD,MAAM;EACd;EAEJ,IAAIG,GAAG,GAACJ,WAAW,EAAE,EAAmB;;EAEtC,oBACA;IAAA,uBACA;MAAK,SAAS,EAAC,MAAM;MAAA,wBACtB;QAAK,SAAS,EAAC,cAAc;QAAA,WACzB,CAAC,GAAGT,OAAO,CAACc,KAAK,CAACV,KAAK,CAAC,CAAC,CAAC,EAACA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAACW,GAAG,CAAC,CAACC,IAAI,EAACC,KAAK,kBAAG,QAAC,IAAI;UAAC,IAAI,EAAED,IAAK;UAAa,OAAO,EAAEd;QAAQ,GAAxBe,KAAK;UAAA;UAAA;UAAA;QAAA,QAAsB,CAAC,eAC5G,QAAC,OAAO;UAAC,IAAI,EAAEd,IAAK;UAAC,OAAO,EAAED;QAAQ;UAAA;UAAA;UAAA;QAAA,QAAE;MAAA;QAAA;QAAA;QAAA;MAAA,QACrC,eACN;QAAK,SAAS,EAAC,eAAe;QAAA,uBAC7B,QAAC,WAAW;UAAE,GAAG,EAAEW,GAAI;UAAC,UAAU,EAAEZ,UAAW;UAAC,OAAO,EAAED,OAAQ;UAAC,IAAI,EAAEkB;QAAK;UAAA;UAAA;UAAA;QAAA;MAAI;QAAA;QAAA;QAAA;MAAA,QAC3E;IAAA;MAAA;MAAA;MAAA;IAAA;EAED,iBAEH;AAEJ;AAAC,KA7BQnB,IAAI;AA+Bb,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}